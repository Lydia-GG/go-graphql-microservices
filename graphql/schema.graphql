scalar Time

type Account {
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    description: String!
    price: Float!
}

type Order {
    id: String!
    createdAt: Time!
    totalPrice: Float!
    products: [orderedProdut]!
}
type orderedProdut {
    id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
}

input PaginationInput {
    skip: Int
    take: Int
}

input AccountInput {
    name: String!
}

input ProductInput{
    name: String!
    description: String!
    price: Float!
}

input OrderInput {
    accountId: String!
    products: [orderedProdutInput!]!
}

input orderedProdutInput {
    id: Int!
    quantity: Int!
}

type Mutation {
    createAcount(account: AccountInput!): Account
    createProduct(product: ProductInput!): Product
    createOrder(order: OrderInput!): Order
}

type Query {
    accounts(pagination: PaginationInput!, id: String!): [Account!]!
    products(pagination: PaginationInput!, query: String, id: String): [Product!]!
}